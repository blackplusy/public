1.常见数据库软件
	oracle
	mysql
	sqlserver
	mongodb
	redis

2.mysql基础
	mysql端口：  3306
	tasklist | find "mysqld"
	netstat -an |find "3306"
3.mysql登录
	mysql -u root -p
	注意：环境变量的设置
4.mysql的基础命令
	show databases;
	select database();
	use test;
	show tables;
	select * from goods;
5.表结构创建
	数据类型：
	数字   int
	字符   char  varchar
	日期   date
	表结构创建语法：
	create table 表(
		列  数据类型,
		列  数据类型
	);

6.表结构的删除
	语法：drop table 表;

7.数据的新增
	语法：insert into 表 values 值;
	语法：insert into 表(列1，列2...) values(值1，值2...);

8.数据的修改
	语法：update 表 set 列=值 where 条件;

9.数据的删除
	语法:delete from 表 where 条件；
	语法:truncate table 表;

10.数据的查询
	语法:select 列 from 表 where 条件;
cshop表结构：
http://book.ecmoban.com/images/db.htm
数据的查询
查询可以查询指定的行，指定的列，指定行的列
语法：select  列  from  表  where 条件;
*是代表表中所有的列名
查询ecs_goods表中所有数据
select * from ecs_goods;
查询ecs_goods表中商品名称为KD876的所有数据
select * from ecs_goods where goods_name='KD876';
查询ecs_goods表中所有的商品名称
select goods_name from ecs_goods;
查询ecs_goods表中商品名称P806的商品名称和本店售价
select goods_name,shop_price from ecs_goods where goods_name='P806'

================================================
where条件
筛选数据时候所用到的
1.比较运算
	>	大于
	<	小于
	=	等于
	>=	大于等于
	<=	小于等于
	!=	不等于
	<>	不等于
	例子：查询ecs_goods表中本店售价高于2000的所有商品信息
	select * from ecs_goods where shop_price>2000;
	例子：查询ecs_goods表中商品名称不是KD876的所有商品信息
	select * from ecs_goods where goods_name<>'KD876';
2.关系运算
	and    同时满足条件
	or     满足一个条件即可
	not	   不满足条件
	例子：查询ecs_goods表中本店售价范围2000和3000之间的所有商品名称
	select goods_name from ecs_goods
	where shop_price>=2000
	and  shop_price<=3000;
	例子：查询商品名称是KD876或者诺基亚的所有信息
	select * from ecs_goods 
	where goods_name='KD876'
	or    goods_name='诺基亚';
3.区间
	between ...and ...
	注意：小在前，大在后，包括两个端点
例子：查询ecs_goods表中本店售价范围2000和3000之间的所有商品名称
	select * from ecs_goods where shop_price between 2000 and 3000;

4.模糊查询
当信息不完整时候使用模糊查询，多数是和字符类型一起使用
like
_        一个字符
%		 任意个字符
查询ecs_goods表中商品名称诺基亚开头的所有商品信息
select * from ecs_goods where goods_name like '诺基亚%';
查询ecs_goods表中商品名称6结尾的说有商品名称
select goods_name from ecs_goods where goods_name like '%6';
查询ecs_goods表中商品名称是6个字符的所有信息
select * from ecs_goods where goods_name like '______';

5.空值查询
null没有任何数据类型，没有任何值,不能用于比较和运算
查询时候使用is null或者is not null
例子:查询ecs_goods表中suppliers_id不为空的所有信息 
select * from ecs_goods where suppliers_id is not null;

6.in
在...里面...或的关系
例子：查询商品名称是KD876或者诺基亚的所有信息
select * from ecs_goods where goods_name in('KD876','诺基亚');


补充：
round()		小数点后保留几位
upper()		大写
lower()		小写
select lower(goods_name),goods_name
from ecs_goods;
avg()		平均
select avg(shop_price),round(avg(shop_price),2) from ecs_goods;


1.多表查询
a.笛卡尔积
两张表不做任何关联产生的数据，会导致数据量成倍增加，无效数据增加
可以使用连接查询来避免此类问题
select * from ecs_goods;
select * from ecs_category;
select * from ecs_goods,ecs_category;
b.内联查询
当一张表无法满足条件时候，使用多张表进行查询
内联查询语法：
select 列 from 表1，表2 where 表1.列=表2.列;
select 列 from 表1 inner join 表2 on 表1.列=表2.列;
判断相关列的方法
1.列名相同		
2.作用相同
3.主外键关系
例子：查询商品名称是KD876的分类名称
1.分析列：
商品名称
分类名称
2.分析表：
ecs_goods
ecs_category
3.关联
select * from ecs_goods,ecs_category
where ecs_goods.cat_id=ecs_category.cat_id;
4.过滤
select cat_name from ecs_goods,ecs_category
where ecs_goods.cat_id=ecs_category.cat_id
and goods_name='KD876';

例子：查询分类名称是3G手机都有哪些商品名称,分类id
3.
select * from ecs_goods g,ecs_category c
where g.cat_id=c.cat_id;
4.
select g.goods_name,g.cat_id from ecs_goods g,ecs_category c
where g.cat_id=c.cat_id
and c.cat_name='3G手机';


查询分类名称是3G手机的并且本店售价范围在2000和3000之间的所有商品名称


查询商品名称以诺基亚开头的商品所属的分类名称
select distinct(c.cat_name) from ecs_goods g,ecs_category c
where g.cat_id=c.cat_id
and g.goods_name like '诺基亚%';

2.jpg
a.select s.name from student s,achievement a
  where s.id=a.id and a.mark>85;
b.select count(id) from achievement
  where mark>=90;
c.insert into achievement values(7,80);
d.update achievement set mark=87
  where id=3;
e.delete from achievement where id=6;
  delete from student where name='Betty';

4.jpg
a.select s#,grade from sc where c#='C2';
b.select sname from s where sname like 'D%';
c.
select s.s#,s.sname from s,sc,c
where s.s#=sc.s#
and sc.c#=c.c#
and c.cname='Maths';
d.
select s# from sc where c#='C2' or c#='C4';




















































































